#extend("base"):
    #export("content"):
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">
                <a class="navbar-brand" href="#">Project Tester</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item">
                            <a class="nav-link" aria-current="page" href="/">Projects</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/logout">Logout</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>

        <script>

            function isJson(item) {
                item = typeof item !== "string"
                    ? JSON.stringify(item)
                    : item;

                try {
                    item = JSON.parse(item);
                } catch (e) {
                    return false;
                }

                if (typeof item === "object" && item !== null) {
                    return true;
                }

                return false;
            }

            function removeAllChildNodes(parent) {
                while (parent.firstChild) {
                    parent.removeChild(parent.firstChild);
                }
            }

            function connect() {
                let pathname = window.location.pathname
                let host = window.location.host
                let socket = new WebSocket("ws://" + host  + pathname + "/test")

                socket.onclose = function(event) {
                    if (event.wasClean) {
                        let status = document.createElement('p');
                        status.textContent = "> " + `[client] Connection closed cleanly, code=${event.code} reason=${event.reason}`
                        document.getElementById('status').append(status);
                    } else {
                    // e.g. server process killed or network down
                    // event.code is usually 1006 in this case
                        let status = document.createElement('p');
                        status.textContent = "> " + '[client] Connection died'
                        document.getElementById('status').append(status);
                    }
                };

                socket.onopen = function(e) {
                    
                    $("#results").removeClass("d-none")
                    removeAllChildNodes(document.querySelector('#returnValue'));
                    removeAllChildNodes(document.querySelector('#status'));
                    removeAllChildNodes(document.querySelector('#standardOutput'));
                    removeAllChildNodes(document.querySelector('#standardError'));

                    let status = document.createElement('p');
                    status.textContent = "> " + "[client] - Establishing connection"
                    document.getElementById('status').append(status);
                    socket.send("Hello");
                };

                socket.onmessage = function(event) {
                    if (isJson(event.data)) {
                        let json = JSON.parse(event.data)
                        let returnValue = document.createElement('p');
                        returnValue.textContent = "> " + json["resultType"];
                        document.getElementById('returnValue').append(returnValue);

                        let standardOutput = document.createElement('p');
                        standardOutput.textContent = "> " + json["stdout"];
                        document.getElementById('standardOutput').append(standardOutput);

                        let standardError = document.createElement('p');
                        standardError.textContent = "> " + json["stderr"];
                        document.getElementById('standardError').append(standardError);
                    } else {
                        let status = document.createElement('p');
                        status.textContent = "> " + event.data
                        document.getElementById('status').append(status);
                    }
                };
            }
        </script>

        <div class="container mt-5">
            <div class="row align-ite">
                <div class="col-12 col-md-6 border-end">
                    <h1>Project Name: #(project.name)</h1>
                    <p>CreatedBy: #(project.createdBy.firstName) #(project.createdBy.lastName)</p>
                    <h2>Description</h2>
                    <p>#(project.description)</p>
                    <p><b>Assigment:</b> <a href="#(project.id)/assigment">Download</a>
                    <p><b>Test Script:</b> <a href="#(project.id)/testscript">Download</a>
                    <h3 class="mb-3">Odovzdanie projektu:</h3>
                    <form class="form" method="POST" action="#(project.id)" enctype="multipart/form-data">
                        <div class="col mb-2">
                            <input class="form-control" type="file" accept=".zip" id="submittedProject" name="submittedProject" required>
                        </div>
                        <div class="col mb-2">
                            <input class="btn btn-primary mb-3" type="submit" value="Submit project">
                        </div>
                    </form>
                    
                </div>
                <div class="col-12 col-md-6 pl-5">
                    <button class="btn btn-primary mb-3", onclick="connect()">Test submitted Project</button>
                    <div id="results" class="d-none">
                        <h2>Return value</h2>
                        <div id="returnValue"></div>
                        <h2>Status</h2>
                        <div id="status"></div>
                        <h2>Standard output</h2>
                        <div id="standardOutput"></div>
                        <h2>Standard error</h2>
                        <div id="standardError"></div>
                    </div>
                </div>
            </div>
        </div>
        
    #endexport
#endextend